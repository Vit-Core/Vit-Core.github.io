{
  /* Sers微服务配置 */
  "Sers": {
    /* 通讯层配置 */
    "CL": {
      /* 共用配置，子项共用，覆写子项未指定的配置 */
      "Config": {

        /* 请求超时时间（单位ms，默认60000） */
        "requestTimeoutMs": 60000,

        /* 后台处理消息的线程个数（单位个，默认2） */
        "workThreadCount": 2,

        //HeartBeat
        /* 心跳检测时间间隔（单位ms，默认10000,若指定为0则不进行心跳检测） */
        "heartBeatIntervalMs": 10000,
        /* 心跳检测超时时间（单位ms，默认30000） */
        "heartBeatTimeoutMs": 30000,
        /* 心跳检测失败重试次数（单位次，默认10） */
        "heartBeatRetryCount": 10,

        /* 连接秘钥，用以验证连接安全性。服务端和客户端必须一致 */
        "secretKey": "SersCL"
      },
      /* one conn is one channel.can be multiable */
      "Client": [
        {
          // Socket.Iocp
          /* (x.1) type - Iocp */
          /* 在此Assembly中查找builder */
          //"assemblyFile": "Sers.CL.Socket.Iocp.dll",
          /* the class of builder in assemblyFile  */
          "className": "Sers.CL.Socket.Iocp.OrganizeClientBuilder",


          /* (x.2) conn config */
          /* 服务端 host地址。例如： "127.0.0.1"、"sersms.com" */
          "host": "127.0.0.1",
          /* 服务端 监听端口号。例如： 4501 */
          "port": 4501
        },

        {
          // Socket.ThreadWait
          /* (x.1) type - ThreadWait */
          /* the class of builder in assemblyFile  */
          //"className": "Sers.CL.Socket.ThreadWait.OrganizeClientBuilder",

          /* (x.2) config */
          /* 服务端 host地址。例如： "127.0.0.1"、"sersms.com" */
          "host": "127.0.0.1",
          /* 服务端 监听端口号。例如： 4501 */
          "port": 4501
        },

        {
          // WebSocket
          /* (x.1) type - WebSocket */
          /* 在此Assembly中查找builder */
          "assemblyFile": "Sers.CL.WebSocket.dll",
          /* the class of builder in assemblyFile  */
          //"className": "Sers.CL.WebSocket.OrganizeClientBuilder",


          /* (x.2) conn config */
          /* 服务端地址(默认为 "ws://127.0.0.1:4503") */
          "host": "ws://127.0.0.1:4503"

        },

        {
          // Zmq.FullDuplex
          /* (x.1) type */
          /* 在此Assembly中查找Builder */
          "assemblyFile": "Sers.CL.Zmq.FullDuplex.dll",
          /* the class of Builder in assemblyFile  */
          //"className": "Sers.CL.Zmq.FullDuplex.OrganizeClientBuilder",


          /* (x.2) config */
          /* 地址。例如： "tcp://127.0.0.1:4504" 、 "ipc://4504"  */
          "endpoint": "tcp://127.0.0.1:4504"
        },

        {
          // Ipc.SharedMemory
          /* (x.1) type - Ipc.SharedMemory */
          /* 在此Assembly中查找Builder */
          "assemblyFile": "Sers.CL.Ipc.SharedMemory.dll",
          /* the class of Builder in assemblyFile  */
          //"className": "Sers.CL.Ipc.SharedMemory.OrganizeClientBuilder",


          /* (x.2) config */
          /* 共享内存名称。例如： "ipcTest" */
          "name": "ipcForStationDemo"
        }
      ]
    },

    /* LocalApiService 配置,可不指定 */
    "LocalApiService": {

      /* 后台服务的线程个数（单位个，默认0,代表不开启服务）*/
      "workThreadCount": 4,

      /* 超时时间，若不指定则后台任务永不超时。（主动关闭超过此时间的任务,实际任务强制关闭的时间会在1倍超时时间到2倍超时时间内)。单位：ms。*/
      "timeout_ms": 10000,


      /* 是否 输出本地Api的调用信息到（ApiTrace）Log文件。默认:false */
      "PrintTrace": false,


      /* 静态文件映射器。映射站点静态文件，可多个,可不指定 */
      "StaticFileMap": [
        {
          /* api路由前缀，例如 "/demo/ui/*" */
          "route": "/demo/ui/*",
          /* api描述，静态文件描述 */
          "apiName": "demo站点静态文件",
          /* 额外静态文件类型映射配置的文件路径（mappings.json），例如"wwwroot/mappings.json"。若不指定（或指定的文件不存在）则不添加额外文件类型映射配置 */
          "ContentTypeMapFile": "mappings.json",
          /* 静态文件的路径，如 "wwwroot/demo" */
          "staticFileDirectory": "wwwroot/demo"
        }
      ],



      /* 默认站点名称，可多个,可不指定 */
      "apiStationNames": [ "demo" ],

      /* Api加载器配置 */
      "//ApiLoaders": [
        {
          /* 加载器的类名，可为 Sers.ApiLoader.Ss.ApiLoader 、 Sers.ApiLoader.WebApi21.ApiLoader 等。若不指定则默认为"Sers.ApiLoader.Ss.ApiLoader" */
          //"loader_className": "Sers.ApiLoader.WebApi21.ApiLoader",
          /* 在此Assembly中查找服务(如 Sers.Core.Station.dll 、Sers.ApiLoader.WebApi21.dll) */
          //"loader_assemblyFile": "Sers.ApiLoader.WebApi21.dll",


          //（通过反射从此包中获取要加载的api）
          /* 在此Assembly中查找服务(如 App.StationDemo.Station.dll)(assembly、assemblyFile、assemblyName 指定任一即可) */
          "assemblyFile": "App.StationDemo.Station.dll",

          /* 在此Assembly中查找服务(如 App.StationDemo.Station)(assembly、assemblyFile、assemblyName 指定任一即可) */
          //"assemblyName": "App.StationDemo.Station",



          /* 强制指定ApiStation名称。可不指定。（优先级从高到低：  apiStationName_Force 、 在代码上的SsStationNameAttribute特性指定 、 apiStationName 、 appsettings.json指定） */
          //"apiStationName_Force": "",

          /* ApiStation名称。可不指定。（优先级从高到低：  apiStationName_Force 、 在代码上的SsStationNameAttribute特性指定 、 apiStationName 、 appsettings.json指定） */
          "apiStationName": "demo"


          /* 强制路由前缀,例如："demo/v1"。可不指定。（优先级从高到低：  routePrefix_Force、在代码上的SsRoutePrefixAttribute特性指定 、 routePrefix） */
          //"routePrefix_Force": "",

          /* 路由前缀,例如："demo/v1"。可不指定。（优先级从高到低：  routePrefix_Force、在代码上的SsRoutePrefixAttribute特性指定 、 routePrefix ） */
          //"routePrefix": ""
        }


      ],



      //调用api前的事件，可不指定
      "//BeforeCallApi": [
        {
          //Bearer 在调用接口前，会获取 rpcData.http.headers.Authorization(格式为 "Bearer xxxxxx")，并作为参数调用接口api_verifyAt，把返回数据放到 rpcData.user.userInfo
          "className": "Bearer",
          /* 验证at接口的地址 */
          "api_verifyAt": "/AuthCenter/account/verifyAt"
        },

        {
          //AccountInCookie 在调用接口前，会获取 rpcData.http.headers.Cookie(格式为 "user=xxx;c=7")中的user，在账号列表中比对userToken，回写 CallerSource(rpcData.caller.source) 和 userInfo(rpcData.user.userInfo)
          "className": "AccountInCookie",
          "account": [
            {
              "userToken": "admin_123456",
              //"CallerSource": "Internal",
              "userInfo": {
                "name": "超级管理员",
                "入口": "Gover网关"
              }
            }
          ]
        }
      ]
    },

    /* ServiceStation配置,可不指定 */
    "ServiceStation": {

      /* 自动上报cpu Usage。不指定则不上报 */
      "//UsageReporter": {
        /* 上报时间间隔（单位：秒） */
        "intervalSecond": 2
      },


      /* 服务中心注册配置。在向服务中心注册站点前 是否打印（Logger.Info）请求参数。默认:false */
      "StationRegist_PrintRegistArg": false,


      /* serviceStation站点信息,可不指定 */
      "serviceStationInfo": {
        /* 服务站点名称 */
        "serviceStationName": "demo",

        /* 服务站点key码，同一台机器上的同一个站点不变（可不指定,若不指定则根据机器码文件夹路径等计算得到）*/
        //"serviceStationKey": "SK0200",

        /* 服务站点版本信息,若不指定则为入口链接库的版本号 */
        //"stationVersion": "1.1.9.0",

        /* [json]服务站点额外信息,可不指定 */
        "info": null
      },

      /* 服务站点所在设备的信息,可不指定 */
      "//deviceInfo": {
        /* 机器key码，同一台机器key码不变（可不指定,若不指定则自动计算机器码）*/
        "deviceKey": "DK0200"
      }


    }
  },

  "Demo": {
    /* 静态文件路径。可为相对路径或绝对路径。若未指定存在的文件夹则默认为当前目录下的wwwroot文件夹。 */
    "wwwroot": "wwwroot\\demo"
  },



  /* Vit工具配置，可不指定 */
  "Vit": {

    /* 日志配置,可不指定 */
    "Logger": {
      /* print the log to console. default:false  */
      "PrintToConsole": true
    },


    /* 序列化配置，可不指定 */
    "Serialization": {
      /* 序列化字符编码。可不指定，默认 UTF8。只可为 UTF7,UTF8,UTF32,ASCII,Unicode。 */
      "Encoding": "UTF8",

      /* 时间序列化格式。可不指定，默认 "yyyy-MM-dd HH:mm:ss" */
      "DateTimeFormat": "yyyy-MM-dd HH:mm:ss"
    }



  }





}
